{"remainingRequest":"/Volumes/MAC1/javaproject/eladmin-web/node_modules/babel-loader/lib/index.js!/Volumes/MAC1/javaproject/eladmin-web/node_modules/eslint-loader/index.js??ref--13-0!/Volumes/MAC1/javaproject/eladmin-web/src/utils/request.js","dependencies":[{"path":"/Volumes/MAC1/javaproject/eladmin-web/src/utils/request.js","mtime":1619011782541},{"path":"/Volumes/MAC1/javaproject/eladmin-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MAC1/javaproject/eladmin-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Volumes/MAC1/javaproject/eladmin-web/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Volumes/MAC1/javaproject/eladmin-web/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _routers = _interopRequireDefault(require(\"@/router/routers\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _store = _interopRequireDefault(require(\"../store\"));\n\nvar _auth = require(\"@/utils/auth\");\n\nvar _settings = _interopRequireDefault(require(\"@/settings\"));\n\nvar _jsCookie = _interopRequireDefault(require(\"js-cookie\"));\n\n// 创建axios实例\nvar service = _axios.default.create({\n  baseURL: process.env.NODE_ENV === 'production' ? process.env.VUE_APP_BASE_API : '/',\n  // api 的 base_url\n  timeout: _settings.default.timeout // 请求超时时间\n\n}); // request拦截器\n\n\nservice.interceptors.request.use(function (config) {\n  if ((0, _auth.getToken)()) {\n    config.headers['Authorization'] = (0, _auth.getToken)(); // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n\n  config.headers['Content-Type'] = 'application/json';\n  return config;\n}, function (error) {\n  Promise.reject(error);\n}); // response 拦截器\n\nservice.interceptors.response.use(function (response) {\n  return response.data;\n}, function (error) {\n  // 兼容blob下载出错json提示\n  if (error.response.data instanceof Blob && error.response.data.type.toLowerCase().indexOf('json') !== -1) {\n    var reader = new FileReader();\n    reader.readAsText(error.response.data, 'utf-8');\n\n    reader.onload = function (e) {\n      var errorMsg = JSON.parse(reader.result).message;\n\n      _elementUi.Notification.error({\n        title: errorMsg,\n        duration: 5000\n      });\n    };\n  } else {\n    var code = 0;\n\n    try {\n      code = error.response.data.status;\n    } catch (e) {\n      if (error.toString().indexOf('Error: timeout') !== -1) {\n        _elementUi.Notification.error({\n          title: '网络请求超时',\n          duration: 5000\n        });\n\n        return Promise.reject(error);\n      }\n    }\n\n    console.log(code);\n\n    if (code) {\n      if (code === 401) {\n        _store.default.dispatch('LogOut').then(function () {\n          // 用户登录界面提示\n          _jsCookie.default.set('point', 401);\n\n          location.reload();\n        });\n      } else if (code === 403) {\n        _routers.default.push({\n          path: '/401'\n        });\n      } else {\n        var errorMsg = error.response.data.message;\n\n        if (errorMsg !== undefined) {\n          _elementUi.Notification.error({\n            title: errorMsg,\n            duration: 5000\n          });\n        }\n      }\n    } else {\n      _elementUi.Notification.error({\n        title: '接口请求失败',\n        duration: 5000\n      });\n    }\n  }\n\n  return Promise.reject(error);\n});\nvar _default = service;\nexports.default = _default;",null]}