{"remainingRequest":"/Volumes/MAC1/javaproject/Sober-web1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/MAC1/javaproject/Sober-web1/src/views/system/user/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/MAC1/javaproject/Sober-web1/src/views/system/user/index.vue","mtime":1619011782555},{"path":"/Volumes/MAC1/javaproject/Sober-web1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MAC1/javaproject/Sober-web1/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Volumes/MAC1/javaproject/Sober-web1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MAC1/javaproject/Sober-web1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport crudUser from '@/api/system/user'\nimport { isvalidPhone } from '@/utils/validate'\nimport { getDepts, getDeptSuperior } from '@/api/system/dept'\nimport { getAll, getLevel } from '@/api/system/role'\nimport { getAllJob } from '@/api/system/job'\nimport CRUD, { presenter, header, form, crud } from '@crud/crud'\nimport rrOperation from '@crud/RR.operation'\nimport crudOperation from '@crud/CRUD.operation'\nimport udOperation from '@crud/UD.operation'\nimport pagination from '@crud/Pagination'\nimport DateRangePicker from '@/components/DateRangePicker'\nimport Treeselect from '@riophae/vue-treeselect'\nimport { mapGetters } from 'vuex'\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\nimport { LOAD_CHILDREN_OPTIONS } from '@riophae/vue-treeselect'\nlet userRoles = []\nlet userJobs = []\nconst defaultForm = { id: null, username: null, nickName: null, gender: '男', email: null, enabled: 'false', roles: [], jobs: [], dept: { id: null }, phone: null }\nexport default {\n  name: 'User',\n  components: { Treeselect, crudOperation, rrOperation, udOperation, pagination, DateRangePicker },\n  cruds() {\n    return CRUD({ title: '用户', url: 'api/users', crudMethod: { ...crudUser }})\n  },\n  mixins: [presenter(), header(), form(defaultForm), crud()],\n  // 数据字典\n  dicts: ['user_status'],\n  data() {\n    // 自定义验证\n    const validPhone = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('请输入电话号码'))\n      } else if (!isvalidPhone(value)) {\n        callback(new Error('请输入正确的11位手机号码'))\n      } else {\n        callback()\n      }\n    }\n    return {\n      height: document.documentElement.clientHeight - 180 + 'px;',\n      deptName: '', depts: [], deptDatas: [], jobs: [], level: 3, roles: [],\n      jobDatas: [], roleDatas: [], // 多选时使用\n      defaultProps: { children: 'children', label: 'name', isLeaf: 'leaf' },\n      permission: {\n        add: ['admin', 'user:add'],\n        edit: ['admin', 'user:edit'],\n        del: ['admin', 'user:del']\n      },\n      enabledTypeOptions: [\n        { key: 'true', display_name: '激活' },\n        { key: 'false', display_name: '锁定' }\n      ],\n      rules: {\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'blur' },\n          { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }\n        ],\n        nickName: [\n          { required: true, message: '请输入用户昵称', trigger: 'blur' },\n          { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }\n        ],\n        email: [\n          { required: true, message: '请输入邮箱地址', trigger: 'blur' },\n          { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }\n        ],\n        phone: [\n          { required: true, trigger: 'blur', validator: validPhone }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'user'\n    ])\n  },\n  created() {\n    this.crud.msg.add = '新增成功，默认密码：123456'\n  },\n  mounted: function() {\n    const that = this\n    window.onresize = function temp() {\n      that.height = document.documentElement.clientHeight - 180 + 'px;'\n    }\n  },\n  methods: {\n    changeRole(value) {\n      userRoles = []\n      value.forEach(function(data, index) {\n        const role = { id: data }\n        userRoles.push(role)\n      })\n    },\n    changeJob(value) {\n      userJobs = []\n      value.forEach(function(data, index) {\n        const job = { id: data }\n        userJobs.push(job)\n      })\n    },\n    deleteTag(value) {\n      userRoles.forEach(function(data, index) {\n        if (data.id === value) {\n          userRoles.splice(index, value)\n        }\n      })\n    },\n    // 新增与编辑前做的操作\n    [CRUD.HOOK.afterToCU](crud, form) {\n      this.getRoles()\n      if (form.id == null) {\n        this.getDepts()\n      } else {\n        this.getSupDepts(form.dept.id)\n      }\n      this.getRoleLevel()\n      this.getJobs()\n      form.enabled = form.enabled.toString()\n    },\n    // 新增前将多选的值设置为空\n    [CRUD.HOOK.beforeToAdd]() {\n      this.jobDatas = []\n      this.roleDatas = []\n    },\n    // 初始化编辑时候的角色与岗位\n    [CRUD.HOOK.beforeToEdit](crud, form) {\n      this.getJobs(this.form.dept.id)\n      this.jobDatas = []\n      this.roleDatas = []\n      userRoles = []\n      userJobs = []\n      const _this = this\n      form.roles.forEach(function(role, index) {\n        _this.roleDatas.push(role.id)\n        const rol = { id: role.id }\n        userRoles.push(rol)\n      })\n      form.jobs.forEach(function(job, index) {\n        _this.jobDatas.push(job.id)\n        const data = { id: job.id }\n        userJobs.push(data)\n      })\n    },\n    // 提交前做的操作\n    [CRUD.HOOK.afterValidateCU](crud) {\n      if (!crud.form.dept.id) {\n        this.$message({\n          message: '部门不能为空',\n          type: 'warning'\n        })\n        return false\n      } else if (this.jobDatas.length === 0) {\n        this.$message({\n          message: '岗位不能为空',\n          type: 'warning'\n        })\n        return false\n      } else if (this.roleDatas.length === 0) {\n        this.$message({\n          message: '角色不能为空',\n          type: 'warning'\n        })\n        return false\n      }\n      crud.form.roles = userRoles\n      crud.form.jobs = userJobs\n      return true\n    },\n    // 获取左侧部门数据\n    getDeptDatas(node, resolve) {\n      const sort = 'id,desc'\n      const params = { sort: sort }\n      if (typeof node !== 'object') {\n        if (node) {\n          params['name'] = node\n        }\n      } else if (node.level !== 0) {\n        params['pid'] = node.data.id\n      }\n      setTimeout(() => {\n        getDepts(params).then(res => {\n          if (resolve) {\n            resolve(res.content)\n          } else {\n            this.deptDatas = res.content\n          }\n        })\n      }, 100)\n    },\n    getDepts() {\n      getDepts({ enabled: true }).then(res => {\n        this.depts = res.content.map(function(obj) {\n          if (obj.hasChildren) {\n            obj.children = null\n          }\n          return obj\n        })\n      })\n    },\n    getSupDepts(deptId) {\n      getDeptSuperior(deptId).then(res => {\n        const date = res.content\n        this.buildDepts(date)\n        this.depts = date\n      })\n    },\n    buildDepts(depts) {\n      depts.forEach(data => {\n        if (data.children) {\n          this.buildDepts(data.children)\n        }\n        if (data.hasChildren && !data.children) {\n          data.children = null\n        }\n      })\n    },\n    // 获取弹窗内部门数据\n    loadDepts({ action, parentNode, callback }) {\n      if (action === LOAD_CHILDREN_OPTIONS) {\n        getDepts({ enabled: true, pid: parentNode.id }).then(res => {\n          parentNode.children = res.content.map(function(obj) {\n            if (obj.hasChildren) {\n              obj.children = null\n            }\n            return obj\n          })\n          setTimeout(() => {\n            callback()\n          }, 200)\n        })\n      }\n    },\n    // 切换部门\n    handleNodeClick(data) {\n      if (data.pid === 0) {\n        this.query.deptId = null\n      } else {\n        this.query.deptId = data.id\n      }\n      this.crud.toQuery()\n    },\n    // 改变状态\n    changeEnabled(data, val) {\n      this.$confirm('此操作将 \"' + this.dict.label.user_status[val] + '\" ' + data.username + ', 是否继续？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        crudUser.edit(data).then(res => {\n          this.crud.notify(this.dict.label.user_status[val] + '成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\n        }).catch(() => {\n          data.enabled = !data.enabled\n        })\n      }).catch(() => {\n        data.enabled = !data.enabled\n      })\n    },\n    // 获取弹窗内角色数据\n    getRoles() {\n      getAll().then(res => {\n        this.roles = res\n      }).catch(() => { })\n    },\n    // 获取弹窗内岗位数据\n    getJobs() {\n      getAllJob().then(res => {\n        this.jobs = res.content\n      }).catch(() => { })\n    },\n    // 获取权限级别\n    getRoleLevel() {\n      getLevel().then(res => {\n        this.level = res.level\n      }).catch(() => { })\n    },\n    checkboxT(row, rowIndex) {\n      return row.id !== this.user.id\n    }\n  }\n}\n",null]}