{"remainingRequest":"/Volumes/MAC1/javaproject/eladmin-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/MAC1/javaproject/eladmin-web/src/views/system/role/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/MAC1/javaproject/eladmin-web/src/views/system/role/index.vue","mtime":1619011782554},{"path":"/Volumes/MAC1/javaproject/eladmin-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MAC1/javaproject/eladmin-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Volumes/MAC1/javaproject/eladmin-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MAC1/javaproject/eladmin-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport crudRoles from '@/api/system/role'\nimport { getDepts, getDeptSuperior } from '@/api/system/dept'\nimport { getMenusTree, getChild } from '@/api/system/menu'\nimport CRUD, { presenter, header, form, crud } from '@crud/crud'\nimport rrOperation from '@crud/RR.operation'\nimport crudOperation from '@crud/CRUD.operation'\nimport udOperation from '@crud/UD.operation'\nimport pagination from '@crud/Pagination'\nimport Treeselect from '@riophae/vue-treeselect'\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\nimport { LOAD_CHILDREN_OPTIONS } from '@riophae/vue-treeselect'\nimport DateRangePicker from '@/components/DateRangePicker'\n\nconst defaultForm = { id: null, name: null, depts: [], description: null, dataScope: '全部', level: 3 }\nexport default {\n  name: 'Role',\n  components: { Treeselect, pagination, crudOperation, rrOperation, udOperation, DateRangePicker },\n  cruds() {\n    return CRUD({ title: '角色', url: 'api/roles', sort: 'level,asc', crudMethod: { ...crudRoles }})\n  },\n  mixins: [presenter(), header(), form(defaultForm), crud()],\n  data() {\n    return {\n      defaultProps: { children: 'children', label: 'label', isLeaf: 'leaf' },\n      dateScopes: ['全部', '本级', '自定义'], level: 3,\n      currentId: 0, menuLoading: false, showButton: false,\n      menus: [], menuIds: [], depts: [], deptDatas: [], // 多选时使用\n      permission: {\n        add: ['admin', 'roles:add'],\n        edit: ['admin', 'roles:edit'],\n        del: ['admin', 'roles:del']\n      },\n      rules: {\n        name: [\n          { required: true, message: '请输入名称', trigger: 'blur' }\n        ],\n        permission: [\n          { required: true, message: '请输入权限', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  created() {\n    crudRoles.getLevel().then(data => {\n      this.level = data.level\n    })\n  },\n  methods: {\n    getMenuDatas(node, resolve) {\n      setTimeout(() => {\n        getMenusTree(node.data.id ? node.data.id : 0).then(res => {\n          resolve(res)\n        })\n      }, 100)\n    },\n    [CRUD.HOOK.afterRefresh]() {\n      this.$refs.menu.setCheckedKeys([])\n    },\n    // 新增前初始化部门信息\n    [CRUD.HOOK.beforeToAdd](crud, form) {\n      this.deptDatas = []\n      form.menus = null\n    },\n    // 编辑前初始化自定义数据权限的部门信息\n    [CRUD.HOOK.beforeToEdit](crud, form) {\n      this.deptDatas = []\n      if (form.dataScope === '自定义') {\n        this.getSupDepts(form.depts)\n      }\n      const _this = this\n      form.depts.forEach(function(dept) {\n        _this.deptDatas.push(dept.id)\n      })\n    },\n    // 提交前做的操作\n    [CRUD.HOOK.afterValidateCU](crud) {\n      if (crud.form.dataScope === '自定义' && this.deptDatas.length === 0) {\n        this.$message({\n          message: '自定义数据权限不能为空',\n          type: 'warning'\n        })\n        return false\n      } else if (crud.form.dataScope === '自定义') {\n        const depts = []\n        this.deptDatas.forEach(function(data) {\n          const dept = { id: data }\n          depts.push(dept)\n        })\n        crud.form.depts = depts\n      } else {\n        crud.form.depts = []\n      }\n      return true\n    },\n    // 触发单选\n    handleCurrentChange(val) {\n      if (val) {\n        const _this = this\n        // 清空菜单的选中\n        this.$refs.menu.setCheckedKeys([])\n        // 保存当前的角色id\n        this.currentId = val.id\n        // 初始化默认选中的key\n        this.menuIds = []\n        val.menus.forEach(function(data) {\n          _this.menuIds.push(data.id)\n        })\n        this.showButton = true\n      }\n    },\n    menuChange(menu) {\n      // 获取该节点的所有子节点，id 包含自身\n      getChild(menu.id).then(childIds => {\n        // 判断是否在 menuIds 中，如果存在则删除，否则添加\n        if (this.menuIds.indexOf(menu.id) !== -1) {\n          for (let i = 0; i < childIds.length; i++) {\n            const index = this.menuIds.indexOf(childIds[i])\n            if (index !== -1) {\n              this.menuIds.splice(index, 1)\n            }\n          }\n        } else {\n          for (let i = 0; i < childIds.length; i++) {\n            const index = this.menuIds.indexOf(childIds[i])\n            if (index === -1) {\n              this.menuIds.push(childIds[i])\n            }\n          }\n        }\n        this.$refs.menu.setCheckedKeys(this.menuIds)\n      })\n    },\n    // 保存菜单\n    saveMenu() {\n      this.menuLoading = true\n      const role = { id: this.currentId, menus: [] }\n      // 得到已选中的 key 值\n      this.menuIds.forEach(function(id) {\n        const menu = { id: id }\n        role.menus.push(menu)\n      })\n      crudRoles.editMenu(role).then(() => {\n        this.crud.notify('保存成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\n        this.menuLoading = false\n        this.update()\n      }).catch(err => {\n        this.menuLoading = false\n        console.log(err.response.data.message)\n      })\n    },\n    // 改变数据\n    update() {\n      // 无刷新更新 表格数据\n      crudRoles.get(this.currentId).then(res => {\n        for (let i = 0; i < this.crud.data.length; i++) {\n          if (res.id === this.crud.data[i].id) {\n            this.crud.data[i] = res\n            break\n          }\n        }\n      })\n    },\n    // 获取部门数据\n    getDepts() {\n      getDepts({ enabled: true }).then(res => {\n        this.depts = res.content.map(function(obj) {\n          if (obj.hasChildren) {\n            obj.children = null\n          }\n          return obj\n        })\n      })\n    },\n    getSupDepts(depts) {\n      const ids = []\n      depts.forEach(dept => {\n        ids.push(dept.id)\n      })\n      getDeptSuperior(ids).then(res => {\n        const date = res.content\n        this.buildDepts(date)\n        this.depts = date\n      })\n    },\n    buildDepts(depts) {\n      depts.forEach(data => {\n        if (data.children) {\n          this.buildDepts(data.children)\n        }\n        if (data.hasChildren && !data.children) {\n          data.children = null\n        }\n      })\n    },\n    // 获取弹窗内部门数据\n    loadDepts({ action, parentNode, callback }) {\n      if (action === LOAD_CHILDREN_OPTIONS) {\n        getDepts({ enabled: true, pid: parentNode.id }).then(res => {\n          parentNode.children = res.content.map(function(obj) {\n            if (obj.hasChildren) {\n              obj.children = null\n            }\n            return obj\n          })\n          setTimeout(() => {\n            callback()\n          }, 200)\n        })\n      }\n    },\n    // 如果数据权限为自定义则获取部门数据\n    changeScope() {\n      if (this.form.dataScope === '自定义') {\n        this.getDepts()\n      }\n    },\n    checkboxT(row) {\n      return row.level >= this.level\n    }\n  }\n}\n",null]}