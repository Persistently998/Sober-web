{"remainingRequest":"/Volumes/MAC1/javaproject/Sober-web1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/MAC1/javaproject/Sober-web1/src/views/mnt/deploy/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/MAC1/javaproject/Sober-web1/src/views/mnt/deploy/index.vue","mtime":1619011782548},{"path":"/Volumes/MAC1/javaproject/Sober-web1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MAC1/javaproject/Sober-web1/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Volumes/MAC1/javaproject/Sober-web1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MAC1/javaproject/Sober-web1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport crudDeploy from '@/api/mnt/deploy'\nimport dForm from './deploy'\nimport fForm from './sysRestore'\nimport CRUD, { presenter, header, form, crud } from '@crud/crud'\nimport rrOperation from '@crud/RR.operation'\nimport crudOperation from '@crud/CRUD.operation'\nimport udOperation from '@crud/UD.operation'\nimport pagination from '@crud/Pagination'\nimport DateRangePicker from '@/components/DateRangePicker'\n\nconst defaultForm = { id: null, app: { id: null }, deploys: [] }\nexport default {\n  name: 'Deploy',\n  components: { dForm, fForm, pagination, crudOperation, rrOperation, udOperation, DateRangePicker },\n  cruds() {\n    return CRUD({ title: '部署', url: 'api/deploy', crudMethod: { ...crudDeploy }})\n  },\n  mixins: [presenter(), header(), form(defaultForm), crud()],\n  data() {\n    return {\n      currentRow: {}, selectIndex: '', appName: '', urlHistory: '',\n      times: 0, appId: '', deployId: '', apps: [], servers: [],\n      permission: {\n        add: ['admin', 'deploy:add'],\n        edit: ['admin', 'deploy:edit'],\n        del: ['admin', 'deploy:del']\n      },\n      rules: {\n        'app.id': [\n          { required: true, message: '应用不能为空', trigger: 'blur', type: 'number' }\n        ],\n        deploys: [\n          { required: true, message: '服务器不能为空', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  methods: {\n    [CRUD.HOOK.beforeRefresh]() {\n      this.selectIndex = ''\n      return true\n    },\n    // 新增编辑前做的操作\n    [CRUD.HOOK.beforeToCU](crud, form) {\n      this.initSelect()\n      const deploys = []\n      form.deploys.forEach(function(deploy, index) {\n        deploys.push(deploy.id)\n      })\n      this.form.deploys = deploys\n    },\n    // 提交前\n    [CRUD.HOOK.beforeSubmit]() {\n      const deploys = []\n      this.form.deploys.forEach(function(data, index) {\n        const deploy = { id: data }\n        deploys.push(deploy)\n      })\n      this.form.deploys = deploys\n      return true\n    },\n    deploy() {\n      this.$refs.deploy.dialog = true\n      this.$refs.deploy.deployInfo = this.currentRow\n    },\n    sysRestore() {\n      this.$refs.sysRestore.dialog = true\n    },\n    handleCurrentChange(selection) {\n      this.crud.selections = selection\n      if (selection.length === 1) {\n        const row = selection[0]\n        this.selectIndex = row.id\n        this.currentRow = row\n        this.appName = row.app.name\n        this.times = this.times + 1\n        this.appId = row.appId\n        this.deployId = row.id\n      } else {\n        this.currentRow = {}\n        this.selectIndex = ''\n      }\n    },\n    startServer() {\n      crudDeploy.startServer(JSON.stringify(this.currentRow))\n        .then(res => {\n        })\n        .catch(err => {\n          console.log('error:' + err.response.data.message)\n        })\n    },\n    stopServer() {\n      crudDeploy.stopServer(JSON.stringify(this.currentRow))\n        .then(res => {\n        })\n        .catch(err => {\n          console.log('error:' + err.response.data.message)\n        })\n    },\n    serverStatus() {\n      crudDeploy.serverStatus(JSON.stringify(this.currentRow))\n        .then(res => {\n        })\n        .catch(err => {\n          console.log('error:' + err.response.data.message)\n        })\n    },\n    initSelect() {\n      crudDeploy.getApps().then(res => {\n        this.apps = res.content\n      })\n      crudDeploy.getServers().then(res => {\n        this.servers = res.content\n      })\n    }\n  }\n}\n",null]}